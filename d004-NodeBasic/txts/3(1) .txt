Class: EventEmitter#
History
The EventEmitter class is defined and exposed by the events module:

const EventEmitter = require('events');
All EventEmitters emit the event 'newListener' when new listeners are added and 'removeListener' when existing listeners are removed.

It supports the following option:

captureRejections <boolean> It enables automatic capturing of promise rejection. Default: false.
Event: 'newListener'#
Added in: v0.1.26
eventName <string> | <symbol> The name of the event being listened for
listener <Function> The event handler function
The EventEmitter instance will emit its own 'newListener' event before a listener is added to its internal array of listeners.

Listeners registered for the 'newListener' event are passed the event name and a reference to the listener being added.

The fact that the event is triggered before adding the listener has a subtle but important side effect: any additional listeners registered to the same name within the 'newListener' callback are inserted before the listener that is in the process of being added.

class MyEmitter extends EventEmitter {}

const myEmitter = new MyEmitter();
// Only do this once so we don't loop forever
myEmitter.once('newListener', (event, listener) => {
  if (event === 'event') {
    // Insert a new listener in front
    myEmitter.on('event', () => {
      console.log('B');
    });
  }
});
myEmitter.on('event', () => {
  console.log('A');
});
myEmitter.emit('event');
// Prints:
//   B
//   A
Event: 'removeListener'#
History
eventName <string> | <symbol> The event name
listener <Function> The event handler function
The 'removeListener' event is emitted after the listener is removed.