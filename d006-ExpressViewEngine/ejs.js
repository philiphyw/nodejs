//compare with the server.js, experience the difference between express way and raw nodejs way in handling request and response
const express = require("express");
//morgan is a 3rd party middleware
const morgan = require('morgan') ;
//mongoose is a ODM library to interact with MongoDB
const mongoose = require('mongoose');
//import the module Blog of mongo scheme from blog.js
const Blog = require('./models/blog');


//express app
const app = express();

//connect to mongodb
const dbURI = 'mongodb+srv://ph217531:1234qweR@expressjs.m52hd.mongodb.net/expressjs?retryWrites=true&w=majority'
// the second para '{useNewUrlParser:true, useUnifiedTopology:true}' is optional, to remove a warning message
mongoose.connect(dbURI,{useNewUrlParser:true, useUnifiedTopology:true})
.then((result)=> console.log('connected to the db'))
.then((result)=>app.listen(3000))//use this line to make sure the app finish connectting to DB first, then start to listen the port for request
.catch((err)=>console.log(err));
//register view engine
app.set("view engine", "ejs");
app.set("views", "htmls"); // if the htmls are stored in a folder called 'views', then this line is no longer needed.




//a middleware as a logger to record requests info
//if put the app.use on the top of the file, all requests will be handled by the app.use and disregard handlers after it.
//if need to move forward af ter app.use, need to add a next method as the third para and call it at the end of the app.use
/*
app.use((req, res,next) => {
  console.log('new request made:');
  console.log('host:',req.hostname);
  console.log('path:',req.path);
  console.log('method:',req.method);
  next();//without this line, app.use will hang in and no more code will be executived.
});
*/

//app.use(express.static(target folder)), this express built-in middleware will make a folder static, which
//will make files in this folder as static files and available to the front end.
app.use(express.static('public'));//with this code, partials head.ejs can link the css file in the public folder

//app.use(morgan()), as a 3rd party middleware, can act as a logger to replace above app.use((req, res,next) logger
app.use(morgan('common'));

//mongoose and mongo sandbox toutes
//request='/add-blog', save a blog object to the mongoDB
app.get('/add-blog',(req,res)=>{
  const blog = new Blog({//the mongoose model Blog, as defined in the blgSchema, has 3 properties: title,snippet,body
    title:'new blog2 has a title',
    snippet:'new blog2 has a snippet',
    body:'new blog2 also has a body'
  })

  //mongoose blog.save()method to save above blog instance to the data base 
  blog.save()
  .then((result)=>{
    res.send(result)//after the result is saved to the DB, send it to the browser
  })
  .catch((err)=>{
    console.log(err)
  });
})

//request='/all-blog', get all blog object from the mongoDB
app.get('/all-blogs',(req,res)=>{
  Blog.find().sort({createdAt:-1})//find all Blog module from the collection in mongoDB, use createdAt value to sort, -1 = descending
  .then((result)=>{
    //res.send(result);//after get all the Blog object from the db, send them to the browser
    res.render("index", {title:'Home', blogs:result});
    
  })
  .catch((err)=>{
    console.log(err);
  })
});


app.get("/", (req, res) => {
  //besides database, can pass an object as the second para to render(), and the relevant ejs page can access the object and all its properties
  res.redirect("all-blogs");
});


//request='/find-blog', get a blog object from the mongoDB
app.get('/find-blog',(req,res)=>{
  Blog.findById('5ff50cf147a2284f0c13ac44')//the __id is automatically generated by mongoDB while creating a record
  .then((result)=>{
    //after get the blog object which matches the id, send it to the browser
    res.send(result);
  })
  .catch((err)=>{
    console.log(err);
  })
})

/*
//instead of send a html file, express will render a ejs view from the views folder.

const blogs = [
  {title:'Philip finds eggs', snippet:"this is the first snippet"},
  {title:'Celia finds tomatos', snippet:"this is the second snippet"},
  {title:'Children love fried eggs with tomatos', snippet:"this is the third snippet"}
]



app.get("/", (req, res) => {
      //besides database, can pass an object as the second para to render(), and the relevant ejs page can access the object and all its properties
      res.render("index", {title:'Home', blogs:blogs});
    });
*/


app.get("/about", (req, res) => {
  res.render("about",{title:'About'});
});

app.get("/blogs/create", (req, res) => {
  res.render("create",{title:'Create New Blog'});
});


//a middleware to return a 404 page
//if a request didn't find a match on the handlers above, will executive below app.use() to return
app.use((req, res) => {
  res.status(404).render("404",{title:'Page Not Found'});
});



